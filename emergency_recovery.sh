#!/bin/bash

# EMERGENCY AWS PRODUCTION RECOVERY SCRIPT
# =========================================
# 
# This script provides emergency recovery procedures for the AWS production instance
# when the Telegram bot is not responding.
#
# Instance Details:
# - IP: 13.239.14.166
# - Instance ID: i-0be83d48202d03ef1
# - SSH Key: ~/.ssh/crypto-bot-key.pem
# - User: ec2-user
# - Region: ap-southeast-2

set -e

echo "üö® EMERGENCY AWS PRODUCTION RECOVERY"
echo "===================================="
echo "üéØ Target: 13.239.14.166 (i-0be83d48202d03ef1)"
echo "‚è∞ Time: $(date)"
echo ""

# Configuration
AWS_IP="13.239.14.166"
INSTANCE_ID="i-0be83d48202d03ef1"
REGION="ap-southeast-2"
SSH_KEY="~/.ssh/crypto-bot-key.pem"
SECURITY_GROUP_ID="sg-0d979f270dae48425"

# Step 1: Check Instance Status
echo "üîç STEP 1: Checking AWS Instance Status"
echo "======================================="

echo "üìä Instance state:"
aws ec2 describe-instances \
    --instance-ids $INSTANCE_ID \
    --region $REGION \
    --query 'Reservations[0].Instances[0].[InstanceId,State.Name,PublicIpAddress]' \
    --output table

INSTANCE_STATE=$(aws ec2 describe-instances \
    --instance-ids $INSTANCE_ID \
    --region $REGION \
    --query 'Reservations[0].Instances[0].State.Name' \
    --output text)

echo "Instance state: $INSTANCE_STATE"

if [ "$INSTANCE_STATE" != "running" ]; then
    echo "‚ùå Instance is not running. Starting instance..."
    aws ec2 start-instances --instance-ids $INSTANCE_ID --region $REGION
    echo "‚è≥ Waiting for instance to be running..."
    aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region $REGION
    echo "‚úÖ Instance is now running"
    
    # Wait additional time for services to initialize
    echo "‚è≥ Waiting 60 seconds for services to initialize..."
    sleep 60
else
    echo "‚úÖ Instance is running"
fi

# Step 2: Check Security Groups
echo ""
echo "üõ°Ô∏è  STEP 2: Checking Security Groups"
echo "===================================="

echo "üìã Current security group rules:"
aws ec2 describe-security-groups \
    --group-ids $SECURITY_GROUP_ID \
    --region $REGION \
    --query 'SecurityGroups[0].IpPermissions[?FromPort==`8080` || FromPort==`8001` || FromPort==`22`]'

echo ""
echo "üîß Adding missing security group rules (ignore if they already exist):"

# Add SSH rule
aws ec2 authorize-security-group-ingress \
    --group-id $SECURITY_GROUP_ID \
    --protocol tcp --port 22 \
    --cidr 0.0.0.0/0 \
    --region $REGION 2>/dev/null && echo "‚úÖ SSH (22) rule added" || echo "‚ÑπÔ∏è  SSH (22) rule already exists"

# Add Bot port rule
aws ec2 authorize-security-group-ingress \
    --group-id $SECURITY_GROUP_ID \
    --protocol tcp --port 8080 \
    --cidr 0.0.0.0/0 \
    --region $REGION 2>/dev/null && echo "‚úÖ Bot (8080) rule added" || echo "‚ÑπÔ∏è  Bot (8080) rule already exists"

# Add Market data port rule
aws ec2 authorize-security-group-ingress \
    --group-id $SECURITY_GROUP_ID \
    --protocol tcp --port 8001 \
    --cidr 0.0.0.0/0 \
    --region $REGION 2>/dev/null && echo "‚úÖ Market (8001) rule added" || echo "‚ÑπÔ∏è  Market (8001) rule already exists"

# Step 3: Test Basic Connectivity
echo ""
echo "üîó STEP 3: Testing Basic Connectivity"
echo "====================================="

echo "üì° Testing SSH connectivity..."
if timeout 10 ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i ~/.ssh/crypto-bot-key.pem ec2-user@$AWS_IP "echo 'SSH connection successful'"; then
    echo "‚úÖ SSH connection: WORKING"
    SSH_WORKING=true
else
    echo "‚ùå SSH connection: FAILED"
    SSH_WORKING=false
fi

echo ""
echo "üì° Testing service ports..."
if timeout 5 bash -c "</dev/tcp/$AWS_IP/8080"; then
    echo "‚úÖ Bot port (8080): OPEN"
    BOT_PORT_OPEN=true
else
    echo "‚ùå Bot port (8080): CLOSED"
    BOT_PORT_OPEN=false
fi

if timeout 5 bash -c "</dev/tcp/$AWS_IP/8001"; then
    echo "‚úÖ Market port (8001): OPEN"
    MARKET_PORT_OPEN=true
else
    echo "‚ùå Market port (8001): CLOSED"
    MARKET_PORT_OPEN=false
fi

# Step 4: Service Health Check & Recovery
echo ""
echo "üè• STEP 4: Service Health Check & Recovery"
echo "=========================================="

if [ "$SSH_WORKING" = true ]; then
    echo "üîç Checking service status on instance..."
    
    ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ~/.ssh/crypto-bot-key.pem ec2-user@$AWS_IP "
        echo 'üìä System Resources:'
        free -h
        echo ''
        
        echo 'üê≥ Docker Status:'
        sudo systemctl status docker | head -3
        echo ''
        
        echo 'üì¶ Docker Containers:'
        cd /home/ec2-user/TG-Bot 2>/dev/null || cd /home/ec2-user/crypto-assistant
        sudo docker ps -a
        echo ''
        
        echo 'üìã Container Health:'
        curl -s -m 5 http://localhost:8080/health 2>/dev/null && echo ' ‚úÖ Bot health: OK' || echo ' ‚ùå Bot health: FAILED'
        curl -s -m 5 http://localhost:8001/health 2>/dev/null && echo ' ‚úÖ Market health: OK' || echo ' ‚ùå Market health: FAILED'
        echo ''
        
        echo 'üîÑ Restarting Services:'
        sudo docker-compose -f docker-compose.aws.yml down
        sleep 5
        sudo docker-compose -f docker-compose.aws.yml up -d
        echo ''
        
        echo '‚è≥ Waiting 30 seconds for services to start...'
        sleep 30
        
        echo 'üìä Final Status Check:'
        sudo docker ps
        echo ''
        curl -s -m 5 http://localhost:8080/health 2>/dev/null && echo '‚úÖ Bot health: OK' || echo '‚ùå Bot health: FAILED'
        curl -s -m 5 http://localhost:8001/health 2>/dev/null && echo '‚úÖ Market health: OK' || echo '‚ùå Market health: FAILED'
    "
else
    echo "‚ùå Cannot SSH into instance - manual intervention required"
    echo ""
    echo "üÜò MANUAL RECOVERY STEPS:"
    echo "1. Check AWS Console for instance status"
    echo "2. Verify security groups allow SSH (port 22)"
    echo "3. Ensure SSH key permissions: chmod 400 ~/.ssh/crypto-bot-key.pem"
    echo "4. Try SSH manually: ssh -i ~/.ssh/crypto-bot-key.pem ec2-user@$AWS_IP"
fi

# Step 5: External Health Check
echo ""
echo "üåê STEP 5: External Health Check"
echo "==============================="

echo "üîç Testing external connectivity..."

if curl -s -m 5 "http://$AWS_IP:8080/health" > /dev/null; then
    echo "‚úÖ Bot external health: ACCESSIBLE"
    echo "   Response: $(curl -s -m 5 "http://$AWS_IP:8080/health")"
else
    echo "‚ùå Bot external health: NOT ACCESSIBLE"
fi

if curl -s -m 5 "http://$AWS_IP:8001/health" > /dev/null; then
    echo "‚úÖ Market external health: ACCESSIBLE"
    echo "   Response: $(curl -s -m 5 "http://$AWS_IP:8001/health")"
else
    echo "‚ùå Market external health: NOT ACCESSIBLE"
fi

# Step 6: Webhook Configuration
echo ""
echo "üì° STEP 6: Telegram Webhook Configuration"
echo "========================================"

BOT_TOKEN="8079723149:AAFGirYfAue-6yYTmaCQLw9cuZHImnhokE8"
WEBHOOK_URL="http://$AWS_IP:8080/webhook"

echo "üîß Setting Telegram webhook..."
WEBHOOK_RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/setWebhook" -d "url=$WEBHOOK_URL")
echo "Webhook response: $WEBHOOK_RESPONSE"

echo ""
echo "üîç Checking webhook info..."
WEBHOOK_INFO=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/getWebhookInfo")
echo "Webhook info: $WEBHOOK_INFO"

# Final Summary
echo ""
echo "üìã RECOVERY SUMMARY"
echo "==================="
echo "Instance State: $INSTANCE_STATE"
echo "SSH Working: $SSH_WORKING"
echo "Bot Port Open: $BOT_PORT_OPEN"
echo "Market Port Open: $MARKET_PORT_OPEN"
echo ""
echo "üéØ Next Steps:"
echo "1. Test bot with Telegram message"
echo "2. Monitor logs: ssh -i ~/.ssh/crypto-bot-key.pem ec2-user@$AWS_IP 'cd /home/ec2-user/TG-Bot && sudo docker-compose logs -f'"
echo "3. Check system resources: ssh -i ~/.ssh/crypto-bot-key.pem ec2-user@$AWS_IP 'htop'"
echo ""
echo "‚úÖ Recovery script complete!"